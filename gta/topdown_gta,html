<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Basic 3D Top-Down GTA-like Concept (HTTP Attempt)</title>
    <style>
        body { margin: 0; overflow: hidden; background-color: #333; }
        canvas { display: block; }
        #ui {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-family: sans-serif;
            font-size: 20px;
            background-color: rgba(0,0,0,0.5);
            padding: 5px;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <div id="ui">
        Wanted Level: <span id="wantedLevelDisplay">0</span>
        <br>
        Controls: WASD/Arrows=Move, K=Increase Wanted (Demo)
    </div>
    <canvas id="gameCanvas"></canvas>

    <!-- Attempt to load Three.js via HTTP from cdnjs (UMD build, potentially unreliable/insecure) -->
    <!-- NOTE: This uses an older version (r128) and the UMD format -->
    <script src="http://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <!-- Main game script (NOT type="module") -->
    <script>
        // No import needed, THREE should be global if the script above loaded successfully

        // Check if THREE loaded (basic check)
        if (typeof THREE === 'undefined') {
             alert("Error: Three.js library failed to load. Check browser console (F12) and network tab. Ensure the HTTP CDN link is working and not blocked.");
             // Stop script execution if THREE isn't there
             throw new Error("Three.js failed to load");
        }


        // --- Basic Setup ---
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xaaaaaa); // Lighter grey background

        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(0, 80, 0);
        camera.lookAt(0, 0, 0);

        const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('gameCanvas') });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMap.enabled = true;

        // --- Lighting ---
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        scene.add(ambientLight);

        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(50, 100, 25);
        directionalLight.castShadow = true;
        directionalLight.shadow.mapSize.width = 1024;
        directionalLight.shadow.mapSize.height = 1024;
        directionalLight.shadow.camera.near = 0.5;
        directionalLight.shadow.camera.far = 500;
        directionalLight.shadow.camera.left = -100;
        directionalLight.shadow.camera.right = 100;
        directionalLight.shadow.camera.top = 100;
        directionalLight.shadow.camera.bottom = -100;
        scene.add(directionalLight);
        scene.add(directionalLight.target);

        // --- Game Elements ---
        const mapSize = 200;
        const tileSize = 10;
        const mapGridSize = mapSize / tileSize;

        const playerSpeed = 15.0;
        let wantedLevel = 0;

        const pedestrians = [];
        const police = [];
        const numberOfPedestrians = 30;
        const numberOfPolice = 5;

        const movement = { forward: false, backward: false, left: false, right: false };

        // --- Materials ---
        const streetMaterial = new THREE.MeshLambertMaterial({ color: 0x444444 });
        const sidewalkMaterial = new THREE.MeshLambertMaterial({ color: 0xaaaaaa });
        const buildingMaterial = new THREE.MeshLambertMaterial({ color: 0x886644 });
        const playerMaterial = new THREE.MeshLambertMaterial({ color: 0x00ff00 });
        const pedestrianMaterial = new THREE.MeshLambertMaterial({ color: 0xffff00 });
        const policeMaterial = new THREE.MeshLambertMaterial({ color: 0x0000ff });

        // --- Create Map ---
        function createMap() {
            const groundGeo = new THREE.PlaneGeometry(mapSize * 1.5, mapSize * 1.5);
            const groundMat = new THREE.MeshLambertMaterial({ color: 0x335533 });
            const groundMesh = new THREE.Mesh(groundGeo, groundMat);
            groundMesh.rotation.x = -Math.PI / 2;
            groundMesh.receiveShadow = true;
            scene.add(groundMesh);

            for (let x = -mapGridSize / 2; x < mapGridSize / 2; x++) {
                for (let z = -mapGridSize / 2; z < mapGridSize / 2; z++) {
                    const posX = x * tileSize + tileSize / 2;
                    const posZ = z * tileSize + tileSize / 2;
                    let tileMesh;

                    const isStreetX = x % 4 === 0 || x % 4 === 1;
                    const isStreetZ = z % 4 === 0 || z % 4 === 1;

                    if (isStreetX || isStreetZ) {
                         if (isStreetX && isStreetZ) {
                             tileMesh = new THREE.Mesh(new THREE.PlaneGeometry(tileSize, tileSize), streetMaterial);
                         } else if ( (x%4 === 0 || x%4 === 1) && (z%4 === 2 || z%4 === 3) ){
                              tileMesh = new THREE.Mesh(new THREE.PlaneGeometry(tileSize, tileSize), sidewalkMaterial);
                              tileMesh.position.y = 0.1;
                         } else if ( (x%4 === 2 || x%4 === 3) && (z%4 === 0 || z%4 === 1) ) {
                              tileMesh = new THREE.Mesh(new THREE.PlaneGeometry(tileSize, tileSize), sidewalkMaterial);
                              tileMesh.position.y = 0.1;
                         } else {
                              tileMesh = new THREE.Mesh(new THREE.PlaneGeometry(tileSize, tileSize), streetMaterial);
                         }
                         tileMesh.rotation.x = -Math.PI / 2;
                         tileMesh.position.set(posX, tileMesh.position.y || 0.05, posZ);
                         tileMesh.receiveShadow = true;
                         scene.add(tileMesh);
                    } else {
                        const buildingHeight = Math.random() * 15 + 5;
                        const buildingGeo = new THREE.BoxGeometry(tileSize * 0.8, buildingHeight, tileSize * 0.8);
                        tileMesh = new THREE.Mesh(buildingGeo, buildingMaterial);
                        tileMesh.position.set(posX, buildingHeight / 2, posZ);
                        tileMesh.castShadow = true;
                        tileMesh.receiveShadow = true;
                        scene.add(tileMesh);
                    }
                }
            }
        }

        // --- Create Player ---
        const playerGeo = new THREE.BoxGeometry(tileSize * 0.5, tileSize * 0.5, tileSize * 0.5);
        const playerMesh = new THREE.Mesh(playerGeo, playerMaterial);
        playerMesh.position.y = tileSize * 0.25;
        playerMesh.castShadow = true;
        scene.add(playerMesh);

        // --- Create NPCs (Pedestrians & Police) ---
        function createNPC(material, type) {
            const npcGeo = new THREE.BoxGeometry(tileSize * 0.4, tileSize * 0.4, tileSize * 0.4);
            const npcMesh = new THREE.Mesh(npcGeo, material);
            npcMesh.position.y = tileSize * 0.2;
            npcMesh.castShadow = true;

            let spawnX, spawnZ;
            do {
                spawnX = (Math.random() - 0.5) * mapSize;
                spawnZ = (Math.random() - 0.5) * mapSize;
            } while (isInsideBuilding(spawnX, spawnZ));

            npcMesh.position.set(spawnX, npcMesh.position.y, spawnZ);

            npcMesh.userData = {
                type: type,
                targetX: spawnX,
                targetZ: spawnZ,
                speed: 2 + Math.random() * 2
            };

            scene.add(npcMesh);
            return npcMesh;
        }

        function isInsideBuilding(x, z) {
            const gridX = Math.floor((x + mapSize / 2) / tileSize);
            const gridZ = Math.floor((z + mapSize / 2) / tileSize);
            const mapGridX = gridX - mapGridSize / 2;
            const mapGridZ = gridZ - mapGridSize / 2;

            const isStreetX = mapGridX % 4 === 0 || mapGridX % 4 === 1;
            const isStreetZ = mapGridZ % 4 === 0 || mapGridZ % 4 === 1;

            return !(isStreetX || isStreetZ);
        }

        function spawnInitialNPCs() {
            for (let i = 0; i < numberOfPedestrians; i++) {
                pedestrians.push(createNPC(pedestrianMaterial, 'pedestrian'));
            }
            for (let i = 0; i < numberOfPolice; i++) {
                police.push(createNPC(policeMaterial, 'police'));
            }
        }

        // --- Update NPCs ---
        function updateNPCs(delta) {
            const allNPCs = [...pedestrians, ...police];
            allNPCs.forEach(npc => {
                const data = npc.userData;
                const dirX = data.targetX - npc.position.x;
                const dirZ = data.targetZ - npc.position.z;
                const distance = Math.sqrt(dirX * dirX + dirZ * dirZ);

                if (distance < 1.0) {
                    let newX, newZ;
                     do {
                        newX = npc.position.x + (Math.random() - 0.5) * 20;
                        newZ = npc.position.z + (Math.random() - 0.5) * 20;
                        newX = Math.max(-mapSize / 2, Math.min(mapSize / 2, newX));
                        newZ = Math.max(-mapSize / 2, Math.min(mapSize / 2, newZ));
                    } while (isInsideBuilding(newX, newZ));
                    data.targetX = newX;
                    data.targetZ = newZ;
                } else {
                    const moveX = (dirX / distance) * data.speed * delta;
                    const moveZ = (dirZ / distance) * data.speed * delta;
                    const nextX = npc.position.x + moveX;
                    const nextZ = npc.position.z + moveZ;
                    if (Math.abs(nextX) < mapSize / 2) npc.position.x = nextX;
                    if (Math.abs(nextZ) < mapSize / 2) npc.position.z = nextZ;
                }

                if (data.type === 'police' && wantedLevel > 0) {
                   data.targetX = playerMesh.position.x;
                   data.targetZ = playerMesh.position.z;
                   data.speed = 5 + wantedLevel;
                } else if (data.type === 'police') {
                    data.speed = 3 + Math.random();
                }
            });
        }

        // --- Input Handling ---
        function setupInputListeners() {
            window.addEventListener('keydown', (event) => {
                switch (event.key) {
                    case 'w': case 'ArrowUp':    movement.forward = true; break;
                    case 's': case 'ArrowDown':  movement.backward = true; break;
                    case 'a': case 'ArrowLeft':  movement.left = true; break;
                    case 'd': case 'ArrowRight': movement.right = true; break;
                    case 'k':
                        if (wantedLevel < 5) {
                             wantedLevel++;
                             document.getElementById('wantedLevelDisplay').textContent = wantedLevel;
                             console.log("Wanted Level:", wantedLevel);
                             if(wantedLevel > 0 && police.length < 15) {
                                 police.push(createNPC(policeMaterial, 'police'));
                             }
                        }
                        break;
                }
            });
            window.addEventListener('keyup', (event) => {
                switch (event.key) {
                    case 'w': case 'ArrowUp':    movement.forward = false; break;
                    case 's': case 'ArrowDown':  movement.backward = false; break;
                    case 'a': case 'ArrowLeft':  movement.left = false; break;
                    case 'd': case 'ArrowRight': movement.right = false; break;
                }
            });
        }

        // --- Game Loop ---
        const clock = new THREE.Clock();

        function animate() {
            // Check if THREE is still available (paranoid check, shouldn't be necessary after initial load)
            if (typeof THREE === 'undefined') return;

            requestAnimationFrame(animate);
            const delta = clock.getDelta();

            // Update Player
            const moveVector = new THREE.Vector3(0, 0, 0);
            if (movement.forward) moveVector.z -= 1;
            if (movement.backward) moveVector.z += 1;
            if (movement.left) moveVector.x -= 1;
            if (movement.right) moveVector.x += 1;
            if (moveVector.length() > 0) {
                 moveVector.normalize();
                 const moveAmount = playerSpeed * delta;
                 const nextX = playerMesh.position.x + moveVector.x * moveAmount;
                 const nextZ = playerMesh.position.z + moveVector.z * moveAmount;
                 if (Math.abs(nextX) < mapSize / 2) { playerMesh.position.x = nextX; }
                 if (Math.abs(nextZ) < mapSize / 2) { playerMesh.position.z = nextZ; }
            }

            // Update NPCs
            updateNPCs(delta);

            // Update Camera
            const targetCameraPosition = new THREE.Vector3(playerMesh.position.x, camera.position.y, playerMesh.position.z + 10);
            camera.position.lerp(targetCameraPosition, 0.1);
            camera.lookAt(playerMesh.position.x, 0, playerMesh.position.z);
            directionalLight.target.position.copy(playerMesh.position);

            // Render
            renderer.render(scene, camera);
        }

        // --- Initialization ---
        createMap();
        spawnInitialNPCs();
        setupInputListeners();
        animate(); // Start the game loop

        // --- Handle Window Resize ---
        window.addEventListener('resize', () => {
             // Check if THREE is available before using it in resize handler
            if (typeof THREE === 'undefined') return;
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }, false);

    </script>
</body>
</html>
